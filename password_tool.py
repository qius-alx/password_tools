#!/usr/bin/env python3
"""
Password Tool - Herramienta de Ciberseguridad para Contrase√±as
Autor: Tu nombre
Descripci√≥n: Herramienta completa para an√°lisis, generaci√≥n y gesti√≥n de contrase√±as
"""

import os
import sys
import json
import hashlib
import secrets
import string
import getpass
import requests
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import base64

class Colors:
    """C√≥digos de colores ANSI para terminal"""
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

class PasswordTool:
    def __init__(self):
        self.passwords_file = "passwords.enc"
        self.salt_file = "salt.key"
        
    def show_banner(self):
        """Muestra el banner principal del programa con dise√±o profesional"""
        banner = (
            f"{Colors.CYAN}{Colors.BOLD}"
            "    ____                                     _   _______            _ \n"
            "   |  _ \\ __ _ ___ ___ __      _____  _ __ __| | |__   __|___   ___ | |\n"
            "   | |_) / _` / __/ __\\ \\ /\\ / / _ \\| '__/ _` |    | |/ _ \\ \\ / _ \\| |\n"
            "   |  __/ (_| \\__ \\__ \\\\ V  V / (_) | | | (_| |    | | (_) | | (_) | |\n"
            "   |_|   \\__,_|___/___/ \\_/\\_/ \\___/|_|  \\__,_|    |_|\\___/  |_\\___/|_|\n"
            "                                                                      \n"
            f"{Colors.PURPLE}"
            "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            "‚îÇ                üîê PASSWORD SECURITY TOOLKIT v2.0 üîê                  ‚îÇ\n"
            "‚îÇ                     Herramienta de Ciberseguridad                    ‚îÇ\n"
            "‚îÇ                                                                      ‚îÇ\n"
            "‚îÇ  GitHub: qius-alx/password-tools                                     ‚îÇ\n"
            "‚îÇ  TikTok: SyntaxLab                                                   ‚îÇ\n"
            "‚îÇ  Autor: qius-alx                                                     ‚îÇ\n"
            "‚îÇ  Para an√°lisis, generaci√≥n y gesti√≥n segura de contrase√±as           ‚îÇ\n"
            "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"
            f"{Colors.BOLD}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê[ M E N √ö   P R I N C I P A L ]‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê{Colors.END}\n"
        )
        
        print(banner)
        
        # Men√∫ con colores
        options = [
            ("1", "üîç Analizar contrase√±a", "Eval√∫a la fortaleza de tu contrase√±a"),
            ("2", "üé≤ Generar contrase√±a segura", "Crea contrase√±as aleatorias robustas"),
            ("3", "üîê Guardar/Gestionar contrase√±as", "Gestor cifrado de contrase√±as"),
            ("4", "üåê Verificar si est√° filtrada (HIBP)", "Consulta base de datos de brechas"),
            ("5", "üìù Convertir frase ‚Üí contrase√±a", "Transforma frases en contrase√±as seguras"),
            ("0", "üö™ Salir", "Terminar programa")
        ]
        
        print(f"{Colors.WHITE}{Colors.BOLD}OPCIONES DISPONIBLES:{Colors.END}")
        print()
        for num, title, desc in options:
            print(f"  {Colors.YELLOW}[{num}]{Colors.END} {Colors.GREEN}{title}{Colors.END}")
            print(f"      {Colors.CYAN}{desc}{Colors.END}")
            print()
        
        print(f"{Colors.PURPLE}{'‚ïê' * 72}{Colors.END}")
        print(f"{Colors.RED}{Colors.BOLD}‚ö†Ô∏è  AVISO:{Colors.END} {Colors.YELLOW}Usa esta herramienta de forma √©tica y responsable{Colors.END}")
        print(f"{Colors.BLUE}üí° Tip: Las contrase√±as no se almacenan sin cifrado{Colors.END}\n")
    
    def analyze_password(self, password):
        """Analiza la fortaleza de una contrase√±a"""
        score = 0
        feedback = []
        
        # Longitud
        if len(password) >= 12:
            score += 2
            feedback.append("‚úÖ Longitud adecuada (12+ caracteres)")
        elif len(password) >= 8:
            score += 1
            feedback.append("‚ö†Ô∏è  Longitud aceptable (8+ caracteres)")
        else:
            feedback.append("‚ùå Muy corta (menos de 8 caracteres)")
        
        # May√∫sculas
        if any(c.isupper() for c in password):
            score += 1
            feedback.append("‚úÖ Contiene may√∫sculas")
        else:
            feedback.append("‚ùå No contiene may√∫sculas")
        
        # Min√∫sculas
        if any(c.islower() for c in password):
            score += 1
            feedback.append("‚úÖ Contiene min√∫sculas")
        else:
            feedback.append("‚ùå No contiene min√∫sculas")
        
        # N√∫meros
        if any(c.isdigit() for c in password):
            score += 1
            feedback.append("‚úÖ Contiene n√∫meros")
        else:
            feedback.append("‚ùå No contiene n√∫meros")
        
        # S√≠mbolos especiales
        special_chars = "!@#$%^&*()_+-=[]{}|;:,.<>?"
        if any(c in special_chars for c in password):
            score += 1
            feedback.append("‚úÖ Contiene s√≠mbolos especiales")
        else:
            feedback.append("‚ùå No contiene s√≠mbolos especiales")
        
        # Patrones comunes (penalizaci√≥n)
        common_patterns = ["123", "abc", "password", "qwerty", "admin"]
        for pattern in common_patterns:
            if pattern.lower() in password.lower():
                score -= 1
                feedback.append(f"‚ùå Contiene patr√≥n com√∫n: {pattern}")
        
        # Determinar nivel de seguridad
        if score >= 5:
            level = "üü¢ FUERTE"
        elif score >= 3:
            level = "üü° MEDIA"
        else:
            level = "üî¥ D√âBIL"
        
        return {
            'score': score,
            'level': level,
            'feedback': feedback
        }
    
    def generate_password(self, length=16, include_symbols=True):
        """Genera una contrase√±a segura aleatoria"""
        characters = string.ascii_letters + string.digits
        if include_symbols:
            characters += "!@#$%^&*()_+-=[]{}|;:,.<>?"
        
        # Asegurar que tenga al menos un car√°cter de cada tipo
        password = [
            secrets.choice(string.ascii_uppercase),
            secrets.choice(string.ascii_lowercase),
            secrets.choice(string.digits)
        ]
        
        if include_symbols:
            password.append(secrets.choice("!@#$%^&*()_+-=[]{}|;:,.<>?"))
        
        # Llenar el resto de la longitud
        for _ in range(length - len(password)):
            password.append(secrets.choice(characters))
        
        # Mezclar la contrase√±a
        secrets.SystemRandom().shuffle(password)
        return ''.join(password)
    
    def derive_key(self, password, salt):
        """Deriva una clave de cifrado a partir de una contrase√±a"""
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
        return key
    
    def get_or_create_salt(self):
        """Obtiene o crea un salt para el cifrado"""
        if os.path.exists(self.salt_file):
            with open(self.salt_file, 'rb') as f:
                return f.read()
        else:
            salt = os.urandom(16)
            with open(self.salt_file, 'wb') as f:
                f.write(salt)
            return salt
    
    def encrypt_data(self, data, master_password):
        """Cifra los datos usando la contrase√±a maestra"""
        salt = self.get_or_create_salt()
        key = self.derive_key(master_password, salt)
        f = Fernet(key)
        return f.encrypt(data.encode())
    
    def decrypt_data(self, encrypted_data, master_password):
        """Descifra los datos usando la contrase√±a maestra"""
        salt = self.get_or_create_salt()
        key = self.derive_key(master_password, salt)
        f = Fernet(key)
        try:
            return f.decrypt(encrypted_data).decode()
        except:
            return None
    
    def load_passwords(self, master_password):
        """Carga las contrase√±as guardadas"""
        if not os.path.exists(self.passwords_file):
            return {}
        
        try:
            with open(self.passwords_file, 'rb') as f:
                encrypted_data = f.read()
            
            decrypted_data = self.decrypt_data(encrypted_data, master_password)
            if decrypted_data is None:
                print("‚ùå Contrase√±a maestra incorrecta")
                return None
            
            return json.loads(decrypted_data)
        except Exception as e:
            print(f"‚ùå Error al cargar contrase√±as: {e}")
            return None
    
    def save_passwords(self, passwords, master_password):
        """Guarda las contrase√±as cifradas"""
        try:
            data = json.dumps(passwords, indent=2)
            encrypted_data = self.encrypt_data(data, master_password)
            
            with open(self.passwords_file, 'wb') as f:
                f.write(encrypted_data)
            
            print("‚úÖ Contrase√±as guardadas correctamente")
            return True
        except Exception as e:
            print(f"‚ùå Error al guardar contrase√±as: {e}")
            return False
    
    def manage_passwords(self):
        """Gestiona el almac√©n de contrase√±as"""
        print(f"\n{Colors.PURPLE}üîê GESTOR DE CONTRASE√ëAS{Colors.END}")
        print(f"{Colors.PURPLE}{'-' * 30}{Colors.END}")
        
        master_password = getpass.getpass("Ingresa tu contrase√±a maestra: ")
        passwords = self.load_passwords(master_password)
        
        if passwords is None:
            return
        
        while True:
            print(f"\n{Colors.CYAN}[1]{Colors.END} Ver contrase√±as")
            print(f"{Colors.CYAN}[2]{Colors.END} Agregar contrase√±a")
            print(f"{Colors.CYAN}[3]{Colors.END} Eliminar contrase√±a")
            print(f"{Colors.CYAN}[0]{Colors.END} Volver al men√∫ principal")
            
            choice = input(f"\n{Colors.BOLD}Selecciona una opci√≥n: {Colors.END}").strip()
            
            if choice == '1':
                if not passwords:
                    print(f"{Colors.YELLOW}No hay contrase√±as guardadas.{Colors.END}")
                else:
                    print(f"\n{Colors.GREEN}üìã CONTRASE√ëAS GUARDADAS:{Colors.END}")
                    for service, data in passwords.items():
                        print(f"{Colors.CYAN}üî∏ {service}:{Colors.END} {data['username']} | {Colors.GREEN}{data['password']}{Colors.END}")
            
            elif choice == '2':
                service = input("Nombre del servicio: ").strip()
                username = input("Usuario/Email: ").strip()
                password = input("Contrase√±a (deja vac√≠o para generar): ").strip()
                
                if not password:
                    length = input("Longitud de contrase√±a (16): ").strip() or "16"
                    try:
                        length = int(length)
                        password = self.generate_password(length)
                        print(f"{Colors.GREEN}‚úÖ Contrase√±a generada: {Colors.CYAN}{password}{Colors.END}")
                    except ValueError:
                        print(f"{Colors.RED}‚ùå Longitud inv√°lida{Colors.END}")
                        continue
                
                passwords[service] = {
                    'username': username,
                    'password': password
                }
                
                if self.save_passwords(passwords, master_password):
                    print(f"{Colors.GREEN}‚úÖ Contrase√±a para {service} guardada{Colors.END}")
            
            elif choice == '3':
                if not passwords:
                    print(f"{Colors.YELLOW}No hay contrase√±as para eliminar.{Colors.END}")
                else:
                    print(f"\n{Colors.CYAN}Servicios disponibles:{Colors.END}")
                    for service in passwords.keys():
                        print(f"- {service}")
                    
                    service = input("¬øQu√© servicio eliminar? ").strip()
                    if service in passwords:
                        del passwords[service]
                        if self.save_passwords(passwords, master_password):
                            print(f"{Colors.GREEN}‚úÖ Contrase√±a de {service} eliminada{Colors.END}")
                    else:
                        print(f"{Colors.RED}‚ùå Servicio no encontrado{Colors.END}")
            
            elif choice == '0':
                break
            else:
                print(f"{Colors.RED}‚ùå Opci√≥n inv√°lida{Colors.END}")
    
    def check_hibp(self, password):
        """Verifica si una contrase√±a aparece en filtraciones usando Have I Been Pwned"""
        print(f"\n{Colors.CYAN}üîç VERIFICANDO EN HAVE I BEEN PWNED...{Colors.END}")
        
        try:
            # Crear hash SHA-1 de la contrase√±a
            sha1 = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
            
            # Los primeros 5 caracteres del hash
            prefix = sha1[:5]
            suffix = sha1[5:]
            
            # Consultar la API de HIBP
            url = f"https://api.pwnedpasswords.com/range/{prefix}"
            headers = {'User-Agent': 'Password-Tool-Python'}
            
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                # Buscar el sufijo en la respuesta
                hashes = response.text.split('\n')
                for hash_line in hashes:
                    if ':' in hash_line:
                        hash_suffix, count = hash_line.split(':')
                        if hash_suffix == suffix:
                            print(f"{Colors.RED}{Colors.BOLD}‚ùå ¬°CONTRASE√ëA COMPROMETIDA!{Colors.END}")
                            print(f"   {Colors.YELLOW}Encontrada {Colors.RED}{count.strip()}{Colors.YELLOW} veces en filtraciones{Colors.END}")
                            return True
                
                print(f"{Colors.GREEN}‚úÖ Contrase√±a no encontrada en filtraciones conocidas{Colors.END}")
                return False
            
            else:
                print(f"{Colors.RED}‚ùå Error en la consulta: {response.status_code}{Colors.END}")
                return None
        
        except requests.exceptions.RequestException as e:
            print(f"{Colors.RED}‚ùå Error de conexi√≥n: {e}{Colors.END}")
            print(f"{Colors.YELLOW}Verifica tu conexi√≥n a internet{Colors.END}")
            return None
        except Exception as e:
            print(f"{Colors.RED}‚ùå Error inesperado: {e}{Colors.END}")
            return None
    
    def phrase_to_password(self, phrase):
        """Convierte una frase en una contrase√±a segura"""
        # Diccionario de reemplazos
        replacements = {
            'a': '@', 'A': '@',
            'e': '3', 'E': '3',
            'i': '!', 'I': '!',
            'o': '0', 'O': '0',
            's': '$', 'S': '$',
            't': '7', 'T': '7',
            'l': '1', 'L': '1',
            ' ': '_'
        }
        
        password = ""
        for char in phrase:
            password += replacements.get(char, char)
        
        # Agregar algunos n√∫meros y s√≠mbolos al final
        password += str(secrets.randbelow(100)).zfill(2)
        password += secrets.choice("!@#$%&*")
        
        return password
    
    def run_option_1(self):
        """Ejecuta la opci√≥n 1: Analizar contrase√±a"""
        print(f"\n{Colors.CYAN}üîç AN√ÅLISIS DE CONTRASE√ëA{Colors.END}")
        print(f"{Colors.PURPLE}{'-' * 30}{Colors.END}")
        
        password = getpass.getpass("Ingresa la contrase√±a a analizar: ")
        if not password:
            print(f"{Colors.RED}‚ùå No se ingres√≥ contrase√±a{Colors.END}")
            return
        
        result = self.analyze_password(password)
        
        print(f"\n{Colors.BOLD}üìä RESULTADO DEL AN√ÅLISIS:{Colors.END}")
        print(f"Nivel de seguridad: {result['level']}")
        print(f"Puntuaci√≥n: {Colors.YELLOW}{result['score']}/6{Colors.END}")
        print(f"\n{Colors.BOLD}üìã Detalles:{Colors.END}")
        for item in result['feedback']:
            print(f"  {item}")
    
    def run_option_2(self):
        """Ejecuta la opci√≥n 2: Generar contrase√±a segura"""
        print(f"\n{Colors.GREEN}üé≤ GENERADOR DE CONTRASE√ëAS{Colors.END}")
        print(f"{Colors.PURPLE}{'-' * 30}{Colors.END}")
        
        try:
            length = input("Longitud de contrase√±a (16): ").strip() or "16"
            length = int(length)
            
            if length < 4:
                print(f"{Colors.RED}‚ùå La longitud m√≠nima es 4 caracteres{Colors.END}")
                return
            
            symbols = input("¬øIncluir s√≠mbolos especiales? (s/n): ").strip().lower()
            include_symbols = symbols in ['s', 'si', 'y', 'yes', '']
            
            password = self.generate_password(length, include_symbols)
            
            print(f"\n{Colors.BOLD}üîê CONTRASE√ëA GENERADA:{Colors.END}")
            print(f"  {Colors.CYAN}{password}{Colors.END}")
            
            # An√°lisis autom√°tico
            result = self.analyze_password(password)
            print(f"\nüìä Nivel de seguridad: {result['level']}")
            
        except ValueError:
            print(f"{Colors.RED}‚ùå Longitud inv√°lida{Colors.END}")
    
    def run_option_4(self):
        """Ejecuta la opci√≥n 4: Verificar filtraci√≥n HIBP"""
        print(f"\n{Colors.BLUE}üåê VERIFICACI√ìN DE FILTRACIONES{Colors.END}")
        print(f"{Colors.PURPLE}{'-' * 30}{Colors.END}")
        
        password = getpass.getpass("Ingresa la contrase√±a a verificar: ")
        if not password:
            print(f"{Colors.RED}‚ùå No se ingres√≥ contrase√±a{Colors.END}")
            return
        
        self.check_hibp(password)
    
    def run_option_5(self):
        """Ejecuta la opci√≥n 5: Convertir frase a contrase√±a"""
        print(f"\n{Colors.YELLOW}üìù CONVERTIDOR FRASE ‚Üí CONTRASE√ëA{Colors.END}")
        print(f"{Colors.PURPLE}{'-' * 30}{Colors.END}")
        
        phrase = input("Ingresa una frase f√°cil de recordar: ").strip()
        if not phrase:
            print(f"{Colors.RED}‚ùå No se ingres√≥ frase{Colors.END}")
            return
        
        password = self.phrase_to_password(phrase)
        
        print(f"\n{Colors.BOLD}üîÑ CONVERSI√ìN:{Colors.END}")
        print(f"  Frase original: {Colors.CYAN}{phrase}{Colors.END}")
        print(f"  Contrase√±a: {Colors.GREEN}{password}{Colors.END}")
        
        # An√°lisis autom√°tico
        result = self.analyze_password(password)
        print(f"\nüìä Nivel de seguridad: {result['level']}")
    
    def run(self):
        """Funci√≥n principal del programa"""
        while True:
            self.show_banner()
            choice = input(f"{Colors.BOLD}Selecciona una opci√≥n: {Colors.END}").strip()
            
            if choice == '1':
                self.run_option_1()
            elif choice == '2':
                self.run_option_2()
            elif choice == '3':
                self.manage_passwords()
            elif choice == '4':
                self.run_option_4()
            elif choice == '5':
                self.run_option_5()
            elif choice == '0':
                print(f"\n{Colors.GREEN}üëã ¬°Gracias por usar Password Tool!{Colors.END}")
                sys.exit(0)
            else:
                print(f"{Colors.RED}‚ùå Opci√≥n inv√°lida{Colors.END}")
            
            input(f"\n{Colors.YELLOW}Presiona Enter para continuar...{Colors.END}")

def main():
    """Funci√≥n principal"""
    try:
        # Limpiar pantalla al iniciar
        os.system('cls' if os.name == 'nt' else 'clear')
        
        tool = PasswordTool()
        tool.run()
    except KeyboardInterrupt:
        print(f"\n\n{Colors.YELLOW}üëã Programa interrumpido por el usuario{Colors.END}")
        sys.exit(0)
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå Error inesperado: {e}{Colors.END}")
        sys.exit(1)

if __name__ == "__main__":
    main()